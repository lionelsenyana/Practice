{
  "{\"sourceRoot\":\"C:\\\\Users\\\\Lionel Senyana\\\\Desktop\\\\Practice\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\Lionel Senyana\\\\Desktop\\\\Practice\",\"filename\":\"C:\\\\Users\\\\Lionel Senyana\\\\Desktop\\\\Practice\\\\index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\Lionel Senyana\\\\Desktop\\\\Practice\",\"plugins\":[{\"key\":\"transform-runtime\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"MemberExpression\":{\"enter\":[null],\"exit\":[null]},\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.5.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\Lionel Senyana\\Desktop\\Practice",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "C:\\Users\\Lionel Senyana\\Desktop\\Practice",
      "filename": "C:\\Users\\Lionel Senyana\\Desktop\\Practice\\index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\Lionel Senyana\\Desktop\\Practice",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-runtime",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "MemberExpression": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\Lionel Senyana\\Desktop\\Practice\\index.js",
        "plugins": [
          "dynamicImport",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\Lionel Senyana\\Desktop\\Practice\\index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\Lionel Senyana\\Desktop\\Practice",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nvar app = (0, _express[\"default\"])();\napp.use(_bodyParser[\"default\"].json());\nvar Users = [{\n  id: 1,\n  names: \"Jonah\"\n}, {\n  id: 2,\n  names: \"Josia\"\n}, {\n  id: 3,\n  names: \"Peter\"\n}];\napp.get('/', function (req, res) {\n  return res.status(200).send({\n    status: 200,\n    message: 'welcome'\n  });\n});\napp.get('/api/v1/Users', function (req, res) {\n  return res.status(200).send({\n    status: 200,\n    message: \"all users sucessfull retrieved\",\n    data: Users\n  });\n});\napp.post('/users', function (req, res) {\n  var newUser = {\n    id: Users.length + 1,\n    names: req.body.names\n  };\n  Users.push(newUser);\n  return res.status(201).send({\n    data: newUser\n  });\n});\napp[\"delete\"]('users/:id', function (req, res) {\n  var checkUser = users.find(function (userId) {\n    return userId.id === parseInt(req.params.id, 10);\n  });\n\n  if (checkUser) {\n    return res.status(404).send({\n      status: 404,\n      message: \"User with is \".concat(req.params.id, \" not found\")\n    });\n  }\n\n  var index = User.indexOf(checkUser);\n  user;\n});\nvar port = 3000;\napp.listen(port, function () {\n  return console.log(\"app listening on port 3000\");\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImFwcCIsInVzZSIsImJvZHlQYXJzZXIiLCJqc29uIiwiVXNlcnMiLCJpZCIsIm5hbWVzIiwiZ2V0IiwicmVxIiwicmVzIiwic3RhdHVzIiwic2VuZCIsIm1lc3NhZ2UiLCJkYXRhIiwicG9zdCIsIm5ld1VzZXIiLCJsZW5ndGgiLCJib2R5IiwicHVzaCIsImNoZWNrVXNlciIsInVzZXJzIiwiZmluZCIsInVzZXJJZCIsInBhcnNlSW50IiwicGFyYW1zIiwiaW5kZXgiLCJVc2VyIiwiaW5kZXhPZiIsInVzZXIiLCJwb3J0IiwibGlzdGVuIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUNBOztBQUlBLElBQU1BLEdBQUcsR0FBRywwQkFBWjtBQUNBQSxHQUFHLENBQUNDLEdBQUosQ0FBUUMsdUJBQVdDLElBQVgsRUFBUjtBQUNBLElBQU1DLEtBQUssR0FBRyxDQUNWO0FBQUVDLEVBQUFBLEVBQUUsRUFBRSxDQUFOO0FBQVNDLEVBQUFBLEtBQUssRUFBRTtBQUFoQixDQURVLEVBRVg7QUFBRUQsRUFBQUEsRUFBRSxFQUFFLENBQU47QUFBU0MsRUFBQUEsS0FBSyxFQUFFO0FBQWhCLENBRlcsRUFHWDtBQUFFRCxFQUFBQSxFQUFFLEVBQUUsQ0FBTjtBQUFTQyxFQUFBQSxLQUFLLEVBQUU7QUFBaEIsQ0FIVyxDQUFkO0FBTUFOLEdBQUcsQ0FBQ08sR0FBSixDQUFRLEdBQVIsRUFBYSxVQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUN0QixTQUFPQSxHQUFHLENBQUNDLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUM3QkQsSUFBQUEsTUFBTSxFQUFFLEdBRHFCO0FBRTlCRSxJQUFBQSxPQUFPLEVBQUU7QUFGcUIsR0FBckIsQ0FBUDtBQUlKLENBTEQ7QUFNQVosR0FBRyxDQUFDTyxHQUFKLENBQVEsZUFBUixFQUF5QixVQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUNuQyxTQUFPQSxHQUFHLENBQUNDLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUN2QkQsSUFBQUEsTUFBTSxFQUFFLEdBRGU7QUFFdkJFLElBQUFBLE9BQU8sRUFBRSxnQ0FGYztBQUd2QkMsSUFBQUEsSUFBSSxFQUFFVDtBQUhpQixHQUFyQixDQUFQO0FBS0YsQ0FORjtBQU9DSixHQUFHLENBQUNjLElBQUosQ0FBUyxRQUFULEVBQW1CLFVBQUNOLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQzlCLE1BQU1NLE9BQU8sR0FBRztBQUNaVixJQUFBQSxFQUFFLEVBQUVELEtBQUssQ0FBQ1ksTUFBTixHQUFlLENBRFA7QUFFWlYsSUFBQUEsS0FBSyxFQUFFRSxHQUFHLENBQUNTLElBQUosQ0FBU1g7QUFGSixHQUFoQjtBQUlDRixFQUFBQSxLQUFLLENBQUNjLElBQU4sQ0FBV0gsT0FBWDtBQUNBLFNBQU9OLEdBQUcsQ0FBQ0MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQ3hCRSxJQUFBQSxJQUFJLEVBQUVFO0FBRGtCLEdBQXJCLENBQVA7QUFJQSxDQVZKO0FBV0lmLEdBQUcsVUFBSCxDQUFXLFdBQVgsRUFBdUIsVUFBQ1EsR0FBRCxFQUFLQyxHQUFMLEVBQVc7QUFDOUIsTUFBTVUsU0FBUyxHQUFDQyxLQUFLLENBQUNDLElBQU4sQ0FBVyxVQUFBQyxNQUFNO0FBQUEsV0FBRUEsTUFBTSxDQUFDakIsRUFBUCxLQUFZa0IsUUFBUSxDQUFDZixHQUFHLENBQUNnQixNQUFKLENBQVduQixFQUFaLEVBQWUsRUFBZixDQUF0QjtBQUFBLEdBQWpCLENBQWhCOztBQUNBLE1BQUdjLFNBQUgsRUFBYTtBQUNULFdBQU9WLEdBQUcsQ0FBQ0MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQ3hCRCxNQUFBQSxNQUFNLEVBQUMsR0FEaUI7QUFFeEJFLE1BQUFBLE9BQU8seUJBQWtCSixHQUFHLENBQUNnQixNQUFKLENBQVduQixFQUE3QjtBQUZpQixLQUFyQixDQUFQO0FBSUg7O0FBQ0QsTUFBTW9CLEtBQUssR0FBQ0MsSUFBSSxDQUFDQyxPQUFMLENBQWFSLFNBQWIsQ0FBWjtBQUNBUyxFQUFBQSxJQUFJO0FBQ1AsQ0FWRDtBQVdMLElBQU1DLElBQUksR0FBRyxJQUFiO0FBQ0E3QixHQUFHLENBQUM4QixNQUFKLENBQVdELElBQVgsRUFBaUI7QUFBQSxTQUFNRSxPQUFPLENBQUNDLEdBQVIsQ0FBWSw0QkFBWixDQUFOO0FBQUEsQ0FBakIiLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFxMaW9uZWwgU2VueWFuYVxcRGVza3RvcFxcUHJhY3RpY2UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcclxuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInO1xyXG5cclxuXHJcblxyXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XHJcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xyXG5jb25zdCBVc2VycyA9IFtcclxuICAgIHsgaWQ6IDEsIG5hbWVzOiBcIkpvbmFoXCIgfSxcclxuICAgeyBpZDogMiwgbmFtZXM6IFwiSm9zaWFcIiB9LFxyXG4gICB7IGlkOiAzLCBuYW1lczogXCJQZXRlclwiIH1cclxuXTtcclxuXHJcbmFwcC5nZXQoJy8nLCAocmVxLCByZXMpID0+IHtcclxuICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLnNlbmQoe1xyXG4gICAgc3RhdHVzOiAyMDAsXHJcbiAgIG1lc3NhZ2U6ICd3ZWxjb21lJ1xyXG4gICB9KVxyXG59KTtcclxuYXBwLmdldCgnL2FwaS92MS9Vc2VycycsIChyZXEsIHJlcykgPT4ge1xyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHtcclxuICAgICAgICAgc3RhdHVzOiAyMDAsXHJcbiAgICAgICAgIG1lc3NhZ2U6IFwiYWxsIHVzZXJzIHN1Y2Vzc2Z1bGwgcmV0cmlldmVkXCIsXHJcbiAgICAgICAgIGRhdGE6IFVzZXJzXHJcbiAgICAgfSlcclxuIH0pO1xyXG4gYXBwLnBvc3QoJy91c2VycycsIChyZXEsIHJlcykgPT4ge1xyXG4gICAgY29uc3QgbmV3VXNlciA9IHtcclxuICAgICAgICBpZDogVXNlcnMubGVuZ3RoICsgMSxcclxuICAgICAgICBuYW1lczogcmVxLmJvZHkubmFtZXNcclxuICAgICB9XHJcbiAgICAgVXNlcnMucHVzaChuZXdVc2VyKTtcclxuICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLnNlbmQoe1xyXG4gICAgICAgICBkYXRhOiBuZXdVc2VyXHJcbiAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcbiAgICAgYXBwLmRlbGV0ZSgndXNlcnMvOmlkJywocmVxLHJlcyk9PntcclxuICAgICAgICAgY29uc3QgY2hlY2tVc2VyPXVzZXJzLmZpbmQodXNlcklkPT51c2VySWQuaWQ9PT1wYXJzZUludChyZXEucGFyYW1zLmlkLDEwKSk7XHJcbiAgICAgICAgIGlmKGNoZWNrVXNlcil7XHJcbiAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLnNlbmQoe1xyXG4gICAgICAgICAgICAgICAgIHN0YXR1czo0MDQsXHJcbiAgICAgICAgICAgICAgICAgbWVzc2FnZTogYFVzZXIgd2l0aCBpcyAke3JlcS5wYXJhbXMuaWR9IG5vdCBmb3VuZGBcclxuICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgIH1cclxuICAgICAgICAgY29uc3QgaW5kZXg9VXNlci5pbmRleE9mKGNoZWNrVXNlcik7XHJcbiAgICAgICAgIHVzZXJcclxuICAgICB9KVxyXG5jb25zdCBwb3J0ID0gMzAwMDtcclxuYXBwLmxpc3Rlbihwb3J0LCAoKSA9PiBjb25zb2xlLmxvZyhcImFwcCBsaXN0ZW5pbmcgb24gcG9ydCAzMDAwXCIpKSJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "app",
        "use",
        "bodyParser",
        "json",
        "Users",
        "id",
        "names",
        "get",
        "req",
        "res",
        "status",
        "send",
        "message",
        "data",
        "post",
        "newUser",
        "length",
        "body",
        "push",
        "checkUser",
        "users",
        "find",
        "userId",
        "parseInt",
        "params",
        "index",
        "User",
        "indexOf",
        "user",
        "port",
        "listen",
        "console",
        "log"
      ],
      "mappings": ";;;;AAAA;;AACA;;AAIA,IAAMA,GAAG,GAAG,0BAAZ;AACAA,GAAG,CAACC,GAAJ,CAAQC,uBAAWC,IAAX,EAAR;AACA,IAAMC,KAAK,GAAG,CACV;AAAEC,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,KAAK,EAAE;AAAhB,CADU,EAEX;AAAED,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,KAAK,EAAE;AAAhB,CAFW,EAGX;AAAED,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,KAAK,EAAE;AAAhB,CAHW,CAAd;AAMAN,GAAG,CAACO,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACtB,SAAOA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC7BD,IAAAA,MAAM,EAAE,GADqB;AAE9BE,IAAAA,OAAO,EAAE;AAFqB,GAArB,CAAP;AAIJ,CALD;AAMAZ,GAAG,CAACO,GAAJ,CAAQ,eAAR,EAAyB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnC,SAAOA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACvBD,IAAAA,MAAM,EAAE,GADe;AAEvBE,IAAAA,OAAO,EAAE,gCAFc;AAGvBC,IAAAA,IAAI,EAAET;AAHiB,GAArB,CAAP;AAKF,CANF;AAOCJ,GAAG,CAACc,IAAJ,CAAS,QAAT,EAAmB,UAACN,GAAD,EAAMC,GAAN,EAAc;AAC9B,MAAMM,OAAO,GAAG;AACZV,IAAAA,EAAE,EAAED,KAAK,CAACY,MAAN,GAAe,CADP;AAEZV,IAAAA,KAAK,EAAEE,GAAG,CAACS,IAAJ,CAASX;AAFJ,GAAhB;AAICF,EAAAA,KAAK,CAACc,IAAN,CAAWH,OAAX;AACA,SAAON,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBE,IAAAA,IAAI,EAAEE;AADkB,GAArB,CAAP;AAIA,CAVJ;AAWIf,GAAG,UAAH,CAAW,WAAX,EAAuB,UAACQ,GAAD,EAAKC,GAAL,EAAW;AAC9B,MAAMU,SAAS,GAACC,KAAK,CAACC,IAAN,CAAW,UAAAC,MAAM;AAAA,WAAEA,MAAM,CAACjB,EAAP,KAAYkB,QAAQ,CAACf,GAAG,CAACgB,MAAJ,CAAWnB,EAAZ,EAAe,EAAf,CAAtB;AAAA,GAAjB,CAAhB;;AACA,MAAGc,SAAH,EAAa;AACT,WAAOV,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,MAAAA,MAAM,EAAC,GADiB;AAExBE,MAAAA,OAAO,yBAAkBJ,GAAG,CAACgB,MAAJ,CAAWnB,EAA7B;AAFiB,KAArB,CAAP;AAIH;;AACD,MAAMoB,KAAK,GAACC,IAAI,CAACC,OAAL,CAAaR,SAAb,CAAZ;AACAS,EAAAA,IAAI;AACP,CAVD;AAWL,IAAMC,IAAI,GAAG,IAAb;AACA7B,GAAG,CAAC8B,MAAJ,CAAWD,IAAX,EAAiB;AAAA,SAAME,OAAO,CAACC,GAAR,CAAY,4BAAZ,CAAN;AAAA,CAAjB",
      "sourceRoot": "C:\\Users\\Lionel Senyana\\Desktop\\Practice",
      "sourcesContent": [
        "import express from 'express';\r\nimport bodyParser from 'body-parser';\r\n\r\n\r\n\r\nconst app = express();\r\napp.use(bodyParser.json());\r\nconst Users = [\r\n    { id: 1, names: \"Jonah\" },\r\n   { id: 2, names: \"Josia\" },\r\n   { id: 3, names: \"Peter\" }\r\n];\r\n\r\napp.get('/', (req, res) => {\r\n     return res.status(200).send({\r\n    status: 200,\r\n   message: 'welcome'\r\n   })\r\n});\r\napp.get('/api/v1/Users', (req, res) => {\r\n    return res.status(200).send({\r\n         status: 200,\r\n         message: \"all users sucessfull retrieved\",\r\n         data: Users\r\n     })\r\n });\r\n app.post('/users', (req, res) => {\r\n    const newUser = {\r\n        id: Users.length + 1,\r\n        names: req.body.names\r\n     }\r\n     Users.push(newUser);\r\n     return res.status(201).send({\r\n         data: newUser\r\n     });\r\n\r\n    });\r\n     app.delete('users/:id',(req,res)=>{\r\n         const checkUser=users.find(userId=>userId.id===parseInt(req.params.id,10));\r\n         if(checkUser){\r\n             return res.status(404).send({\r\n                 status:404,\r\n                 message: `User with is ${req.params.id} not found`\r\n             })\r\n         }\r\n         const index=User.indexOf(checkUser);\r\n         user\r\n     })\r\nconst port = 3000;\r\napp.listen(port, () => console.log(\"app listening on port 3000\"))"
      ]
    },
    "sourceType": "script",
    "mtime": 1566958738021
  }
}